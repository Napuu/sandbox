{"version":3,"sources":["BasemapSelector.js","hooks.js","Controls.js","experiments/Ships.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["basemaps","title","url","icon","setBasemap","viewport","mapboxApiAccessToken","debouncedViewport","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","setTimeout","clearTimeout","useDebounce","basemapCanvasRefs","map","basemap","useRef","justLoaded","setJustLoaded","Promise","all","_","i","async","img","Image","index","onload","canvas","current","ctx","getContext","test","globalAlpha","drawableWidth","width","drawableHeight","height","x","y","drawImage","requestAnimationFrame","src","longitude","latitude","zoom","Math","min","setImage","Box","p","Paper","pt","pb","display","flexDirection","Button","onClick","style","borderRadius","ref","Controls","setAddingLocations","addingLocations","motion","div","initial","opacity","animate","color","BasemapSelector","Layer","data","viewState","animationSpeed","time","setTime","animation","useCallback","t","id","window","cancelAnimationFrame","length","layer","TripsLayer","getPath","d","waypoints","coordinates","getTimestamps","timestamp","getColor","widthMinPixels","rounded","fadeTrail","trailLength","currentTime","shadowEnabled","layers","MAPBOX_TOKEN","process","Map","setViewport","innerWidth","innerHeight","setBaseMap","mapRef","onresize","handleGeocoderViewportChange","newViewport","markers","setMarkers","console","log","setData","fetched","fetch","text","split","filter","line","parsed","JSON","parse","zip","polyline","decode","stringify","position","zIndex","bottom","top","left","mapStyle","onNativeClick","ev","lngLat","concat","Date","getTime","popup","onViewportChange","nextViewport","marker","toFixed","closeButton","right","IconButton","size","m","Typography","navigator","clipboard","writeText","fontSize","translateY","transition","duration","ease","offsetLeft","offsetTop","draggable","onDragEnd","handleMarkerDragEnd","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b1ee801.chunk.js","sourcesContent":["import { Button, Paper, Box } from '@material-ui/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { useDebounce } from \"./hooks\";\n\nexport const basemaps = [\n  { title: \"Streets\", url: \"mapbox://styles/mapbox/streets-v11\", icon: \"streets-v11\" },\n  { title: \"Satellite\", url: \"mapbox://styles/mapbox/satellite-v9\", icon: \"satellite-v9\" },\n];\n\n// No idea what is going on here.\n// Trying to use named function breaks useRef.\n// eslint-disable-next-line\nexport default function ({ setBasemap, viewport, mapboxApiAccessToken }) {\n\n  const debouncedViewport = useDebounce(viewport, 1000);\n  const basemapCanvasRefs = basemaps.map(basemap => useRef(null));\n\n  const [justLoaded, setJustLoaded] = useState(false);\n  useEffect(() => {\n    setTimeout(() => setJustLoaded(true), 3000);\n  }, []);\n  useEffect(() => {\n    if (!justLoaded) return;\n\n    const setImage = async (index) => {\n      const img = new Image();\n      const basemap = basemaps[index];\n      img.onload = () => {\n        const canvas = basemapCanvasRefs[index].current;\n        const ctx = canvas.getContext(\"2d\");\n        let i = 0;\n        const test = () => {\n          i += 0.01;\n          ctx.globalAlpha = i;\n          let drawableWidth = canvas.width;\n          let drawableHeight = canvas.height;\n          let x = 0, y = 0;\n          if (img.height > img.width) {\n            drawableHeight = drawableWidth / img.width * img.height;\n            y = (canvas.height - drawableHeight) / 2;\n          } else {\n            drawableWidth = drawableHeight / img.height * img.width;\n            x = (canvas.width - drawableWidth) / 2;\n          }\n          ctx.drawImage(img, x, y, drawableWidth, drawableHeight);\n          if (i < 1) {\n            requestAnimationFrame(test);\n          }\n        };\n        requestAnimationFrame(test);\n      };\n      img.src = `https://api.mapbox.com/styles/v1/mapbox/${basemap.icon}/static/${debouncedViewport.longitude},${debouncedViewport.latitude},${debouncedViewport.zoom}/${Math.min(debouncedViewport.width, 1280)}x${Math.min(debouncedViewport.height, 1280)}?access_token=${mapboxApiAccessToken}`;\n    };\n    Promise.all(basemaps.map((_, i) => {\n      return setImage(i);\n    }));\n  }, [justLoaded, debouncedViewport, basemapCanvasRefs, mapboxApiAccessToken]);\n\n  return (\n    <Box p={1}>\n      <Paper>\n        <Box pt={0.5} pb={0.5} display=\"flex\" flexDirection=\"column\">\n          {basemaps.map((basemap, i) => (\n            <Button key={i} onClick={() => {\n              setBasemap(basemap.url);\n            }}>\n              <canvas style={{\"border\": \"1px solid rgba(0, 0, 0, 0.5)\", borderRadius: 5}} ref={basemapCanvasRefs[i]} width={50} height={50} />\n            </Button>\n          ))}\n        </Box>\n      </Paper>\n    </Box>\n  );\n}\n","// Hook\nimport { useRef, useState, useEffect } from 'react';\nexport function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};","import React, {useState, useEffect} from 'react';\nimport { Button, Paper, Box } from '@material-ui/core';\nimport AddLocationAltIcon from '@mui/icons-material/AddLocationAlt';\nimport BasemapSelector from './BasemapSelector';\nimport { motion } from 'framer-motion';\n\nfunction Controls({viewport, basemap, mapboxApiAccessToken, setBasemap, setAddingLocations, addingLocations}) {\n  const [justLoaded, setJustLoaded] = useState(false);\n  useEffect(() => {\n    setTimeout(() => setJustLoaded(true), 3000);\n  }, []);\n  return (<motion.div initial={{ opacity: 0 }} animate={{ opacity: justLoaded > 0 ? 1 : 0 }}>\n      <Box p={1} pb={0}>\n        <Paper>\n          <Box p={0.5} display=\"flex\" flexDirection=\"column\">\n            <Button onClick={() => { setAddingLocations(p => !p); }}>\n              <AddLocationAltIcon color={addingLocations ? \"success\" : \"disabled\"} />\n            </Button>\n          </Box >\n        </Paper>\n      </Box>\n      <BasemapSelector\n        viewport={viewport}\n        basemap={basemap}\n        mapboxApiAccessToken={mapboxApiAccessToken}\n        setBasemap={setBasemap} />\n  </motion.div >\n  );\n}\n\nexport default Controls;","import { TripsLayer } from '@deck.gl/geo-layers';\nimport DeckGL from '@deck.gl/react';\nimport { useEffect, useState, useCallback } from 'react';\nexport default function Layer({ data, viewState }) {\n  /**\n   * Data format:\n   * [\n   *   {\n   *     waypoints: [\n   *      {coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000}\n   *      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010}\n   *       ...,\n   *      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\n   *     ]\n   *   }\n   * ]\n   */\n  // const te\n  const animationSpeed = 86400000 / 1500;\n  const [time, setTime] = useState(0);\n  const [animation] = useState({});\n\n  const animate = useCallback(() => {\n    setTime(t => (t + animationSpeed) % 86400000);\n    animation.id = window.requestAnimationFrame(animate);\n  }, [animation, animationSpeed]);\n\n  useEffect(\n    () => {\n      animation.id = window.requestAnimationFrame(animate);\n      return () => window.cancelAnimationFrame(animation.id);\n    },\n    [animation, animate]\n  );\n\n  useEffect(() => {\n    if (data.length === 0) return;\n    // get maximum timestamp from data\n    /*\n    let min = Infinity;\n    let max = 0;\n    data[0].waypoints.forEach(list => {\n      if (list.timestamp > max) {\n        max = list.timestamp;\n      }\n      if (list.timestamp < min) {\n        min = list.timestamp;\n      }\n    });\n    // get minimum timestamp from data\n    console.log(min, max, max - min);\n    */\n  }, [data]);\n  const layer = new TripsLayer({\n    id: 'trips-layer',\n    data,\n    getPath: d => d.waypoints.map(p => p.coordinates),\n    // deduct start timestamp from each data point to avoid overflow\n    getTimestamps: d => d.waypoints.map(p => p.timestamp),\n    getColor: [253, 128, 93],\n    opacity: 0.8,\n    widthMinPixels: 5,\n    rounded: true,\n    fadeTrail: true,\n    trailLength: animationSpeed * 150,\n    currentTime: time,\n\n    shadowEnabled: false\n  });\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n};","import { useCallback, useEffect, useRef, useState } from 'react';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport Geocoder from \"react-map-gl-geocoder\";\nimport 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport RoomIcon from '@mui/icons-material/Room';\nimport { basemaps } from \"./BasemapSelector\";\nimport { motion } from 'framer-motion';\nimport Controls from './Controls';\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Ships from \"./experiments/Ships\";\nimport polyline from \"@mapbox/polyline\";\nimport _ from \"lodash\";\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\nfunction Map() {\n  const [viewport, setViewport] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    latitude: 65.41,\n    longitude: 25.88,\n    zoom: 4.3\n  });\n\n  const [basemap, setBaseMap] = useState(basemaps[1].url);\n  const mapRef = useRef();\n  window.onresize = () => {\n    setViewport({\n      ...viewport,\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  };\n\n  const handleGeocoderViewportChange = useCallback(\n    (newViewport) => {\n      setViewport(newViewport);\n    },\n    []\n  );\n\n  const [markers, setMarkers] = useState([]);\n  const [addingLocations, setAddingLocations] = useState(false);\n\n  const handleOnClick = (ev) => {\n    if (addingLocations) {\n      const coordinates = ev.lngLat;\n      setMarkers(markers.concat({ id: new Date().getTime(), latitude: coordinates[1], longitude: coordinates[0], popup: false }));\n    }\n  };\n\n  const handleMarkerDragEnd = (id, ev) => {\n    setMarkers(markers.map(m => (m.id === id ? { ...m, latitude: ev.lngLat[1], longitude: ev.lngLat[0] } : m)));\n  };\n\n  useEffect(() => {\n    console.log(markers);\n  }, [markers]);\n  const handleMarkerClick = (id, ev) => {\n    setMarkers(markers.map(m => (m.id === id ? { ...m, popup: true } : m)));\n  };\n\n  useEffect(() => {\n    setData([\n        {\n          waypoints: [\n          {coordinates: [24, 61], timestamp: 1636840097955 },\n          {coordinates: [25,62], timestamp: 1636840097955 },\n          {coordinates: [25, 63], timestamp: 1636840097975 }\n          ]\n        }\n    ]);\n    (async () => {\n      const fetched = await fetch(\"ships\");\n      const lines = (await fetched.text()).split(\"\\n\");\n      const d = lines.filter(line => line).map((line) => {\n        const parsed = JSON.parse(line);\n        return {waypoints: \n          _.zip(polyline.decode(parsed[0]), parsed[1]).map(line => ({\n            coordinates: line[0],\n            timestamp: line[1]\n          })) \n        };\n      });\n      setData(d);\n      // const json = await fetched.json();\n      // console.log(json);\n      // take five first features from a list\n      // const features = json.features.slice(0, 5);\n\n      /*\n      const newData = {\n        waypoints: json.features.map(feature => ({\n          coordinates: feature.geometry.coordinates,\n          timestamp: feature.properties.timestampExternal\n        }))\n      };\n      */\n      // setData([newData]);\n    })();\n  }, []);\n\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    console.log(\"??\", data);\n    console.log(\"??\", JSON.stringify(data));\n  }, [data]);\n\n\n  return (<div>\n    <div style={{ position: \"absolute\", zIndex: 2, bottom: 30 }}>\n      <Controls\n        viewport={viewport}\n        basemap={basemap}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        setBasemap={setBaseMap}\n        setAddingLocations={setAddingLocations}\n        addingLocations={addingLocations}\n      />\n    </div>\n    <div style={{ position: 'absolute', top: 0, left: 0 }}>\n      <ReactMapGL\n        {...viewport}\n        ref={mapRef}\n        mapStyle={basemap}\n        onNativeClick={handleOnClick}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        onViewportChange={nextViewport => setViewport(nextViewport)}\n      >\n        {data.length && <Ships data={data} viewState={viewport} />}\n        {markers.map(marker => {\n          const text = `lat: ${marker.latitude.toFixed(5)}, lng: ${marker.longitude.toFixed(5)}`;\n          return (<>\n            {marker.popup &&\n              <Popup\n                key={marker.id}\n                latitude={marker.latitude}\n                longitude={marker.longitude}\n                style={{ zIndex: 100 }}\n                closeButton={false}\n              >\n                <Box display=\"flex\" flexDirection=\"column\">\n                  <Box position=\"absolute\" top=\"5px\" right=\"5px\">\n                    <IconButton size=\"small\" onClick={() => { setMarkers(markers.map(m => (m.id === marker.id ? { ...m, popup: false } : m))); }} >\n                      <CloseIcon />\n                    </IconButton>\n                  </Box>\n                  <Box><br /></Box>\n                  <Typography>\n                    {text}\n                    <IconButton size=\"small\" onClick={() => navigator.clipboard.writeText(text)}><ContentCopyIcon fontSize=\"16px\" /></IconButton>\n                  </Typography>\n                </Box>\n              </Popup>\n            }\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: [0, 0.3, 0.5, 1], translateY: [-100, 0] }}\n              transition={{ duration: 0.3, ease: 'easeOut' }}\n            >\n              <Marker\n                offsetLeft={-12}\n                offsetTop={-24}\n                draggable={true}\n                key={marker.id}\n                latitude={marker.latitude}\n                longitude={marker.longitude}\n                onDragEnd={(ev) => { handleMarkerDragEnd(marker.id, ev); }}\n                onClick={(ev) => { handleMarkerClick(marker.id, ev); }}\n              >\n                <RoomIcon color={\"info\"} />\n              </Marker>\n            </motion.div>\n          </>\n          );\n        })}\n          <Geocoder\n            mapRef={mapRef}\n            onViewportChange={handleGeocoderViewportChange}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            position=\"top-right\"\n          />\n      </ReactMapGL>\n    </div>\n  </div>\n  );\n}\nexport default Map;","import './App.css';\nimport Map from './Map';\n\nfunction App() {\n  return (\n    <Map />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}